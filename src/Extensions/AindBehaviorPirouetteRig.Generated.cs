//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace AindBehaviorPirouetteDataSchema.Rig
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class BaseModel
    {
    
        public BaseModel()
        {
        }
    
        protected BaseModel(BaseModel other)
        {
        }
    
        public System.IObservable<BaseModel> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new BaseModel(this)));
        }
    
        public System.IObservable<BaseModel> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new BaseModel(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class CameraControllerSpinnakerCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private System.Collections.Generic.Dictionary<string, SpinnakerCamera> _cameras;
    
        private int? _frameRate;
    
        public CameraControllerSpinnakerCamera()
        {
            _deviceType = "CameraController";
            _cameras = new System.Collections.Generic.Dictionary<string, SpinnakerCamera>();
        }
    
        protected CameraControllerSpinnakerCamera(CameraControllerSpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _cameras = other._cameras;
            _frameRate = other._frameRate;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Cameras to be instantiated
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("cameras", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Cameras to be instantiated")]
        public System.Collections.Generic.Dictionary<string, SpinnakerCamera> Cameras
        {
            get
            {
                return _cameras;
            }
            set
            {
                _cameras = value;
            }
        }
    
        /// <summary>
        /// Frame rate of the trigger to all cameras
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Frame rate of the trigger to all cameras")]
        public int? FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraControllerSpinnakerCamera(this)));
        }
    
        public System.IObservable<CameraControllerSpinnakerCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraControllerSpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("Cameras = " + _cameras + ", ");
            stringBuilder.Append("FrameRate = " + _frameRate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class CommutatorSettings
    {
    
        private double _magnetometerMagnitudeThreshold;
    
        private double _magnetometerOverrideSampling;
    
        private double _magnetometerTurnDifferenceThreshold;
    
        private Vector3 _imuRotationAxis;
    
        public CommutatorSettings()
        {
            _magnetometerMagnitudeThreshold = 50D;
            _magnetometerOverrideSampling = 2D;
            _magnetometerTurnDifferenceThreshold = 1.5D;
            _imuRotationAxis = new Vector3();
        }
    
        protected CommutatorSettings(CommutatorSettings other)
        {
            _magnetometerMagnitudeThreshold = other._magnetometerMagnitudeThreshold;
            _magnetometerOverrideSampling = other._magnetometerOverrideSampling;
            _magnetometerTurnDifferenceThreshold = other._magnetometerTurnDifferenceThreshold;
            _imuRotationAxis = other._imuRotationAxis;
        }
    
        /// <summary>
        /// Field magnitude threshold below which samples will be discarded.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("magnetometer_magnitude_threshold")]
        [System.ComponentModel.DescriptionAttribute("Field magnitude threshold below which samples will be discarded.")]
        public double MagnetometerMagnitudeThreshold
        {
            get
            {
                return _magnetometerMagnitudeThreshold;
            }
            set
            {
                _magnetometerMagnitudeThreshold = value;
            }
        }
    
        /// <summary>
        /// Period of time in seconds that will be used to sample, and override, the commutator via the magnetometer correction.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("magnetometer_override_sampling")]
        [System.ComponentModel.DescriptionAttribute("Period of time in seconds that will be used to sample, and override, the commutat" +
            "or via the magnetometer correction.")]
        public double MagnetometerOverrideSampling
        {
            get
            {
                return _magnetometerOverrideSampling;
            }
            set
            {
                _magnetometerOverrideSampling = value;
            }
        }
    
        /// <summary>
        /// The minimum absolute difference necessary to drive a commutator correction via the magnetometer.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("magnetometer_turn_difference_threshold")]
        [System.ComponentModel.DescriptionAttribute("The minimum absolute difference necessary to drive a commutator correction via th" +
            "e magnetometer.")]
        public double MagnetometerTurnDifferenceThreshold
        {
            get
            {
                return _magnetometerTurnDifferenceThreshold;
            }
            set
            {
                _magnetometerTurnDifferenceThreshold = value;
            }
        }
    
        /// <summary>
        /// The axis of rotation for the IMU correction.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("imu_rotation_axis")]
        [System.ComponentModel.DescriptionAttribute("The axis of rotation for the IMU correction.")]
        public Vector3 ImuRotationAxis
        {
            get
            {
                return _imuRotationAxis;
            }
            set
            {
                _imuRotationAxis = value;
            }
        }
    
        public System.IObservable<CommutatorSettings> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CommutatorSettings(this)));
        }
    
        public System.IObservable<CommutatorSettings> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CommutatorSettings(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("MagnetometerMagnitudeThreshold = " + _magnetometerMagnitudeThreshold + ", ");
            stringBuilder.Append("MagnetometerOverrideSampling = " + _magnetometerOverrideSampling + ", ");
            stringBuilder.Append("MagnetometerTurnDifferenceThreshold = " + _magnetometerTurnDifferenceThreshold + ", ");
            stringBuilder.Append("ImuRotationAxis = " + _imuRotationAxis);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ConnectedClockOutput
    {
    
        private string _targetDevice;
    
        private int _outputChannel;
    
        public ConnectedClockOutput()
        {
        }
    
        protected ConnectedClockOutput(ConnectedClockOutput other)
        {
            _targetDevice = other._targetDevice;
            _outputChannel = other._outputChannel;
        }
    
        /// <summary>
        /// Optional device name to provide user additional information
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target_device")]
        [System.ComponentModel.DescriptionAttribute("Optional device name to provide user additional information")]
        public string TargetDevice
        {
            get
            {
                return _targetDevice;
            }
            set
            {
                _targetDevice = value;
            }
        }
    
        /// <summary>
        /// Output channel
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_channel", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Output channel")]
        public int OutputChannel
        {
            get
            {
                return _outputChannel;
            }
            set
            {
                _outputChannel = value;
            }
        }
    
        public System.IObservable<ConnectedClockOutput> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ConnectedClockOutput(this)));
        }
    
        public System.IObservable<ConnectedClockOutput> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ConnectedClockOutput(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("TargetDevice = " + _targetDevice + ", ");
            stringBuilder.Append("OutputChannel = " + _outputChannel);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpOutputExpander
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        public HarpOutputExpander()
        {
            _deviceType = "OutputExpander";
            _whoAmI = 1108;
        }
    
        protected HarpOutputExpander(HarpOutputExpander other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<HarpOutputExpander> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpOutputExpander(this)));
        }
    
        public System.IObservable<HarpOutputExpander> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpOutputExpander(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class HarpWhiteRabbit
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private int _whoAmI;
    
        private string _serialNumber;
    
        private string _portName;
    
        private System.Collections.Generic.List<ConnectedClockOutput> _connectedClockOutputs;
    
        public HarpWhiteRabbit()
        {
            _deviceType = "WhiteRabbit";
            _whoAmI = 1404;
            _connectedClockOutputs = new System.Collections.Generic.List<ConnectedClockOutput>();
        }
    
        protected HarpWhiteRabbit(HarpWhiteRabbit other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _whoAmI = other._whoAmI;
            _serialNumber = other._serialNumber;
            _portName = other._portName;
            _connectedClockOutputs = other._connectedClockOutputs;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("who_am_i")]
        public int WhoAmI
        {
            get
            {
                return _whoAmI;
            }
            set
            {
                _whoAmI = value;
            }
        }
    
        /// <summary>
        /// Device serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number")]
        [System.ComponentModel.DescriptionAttribute("Device serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Device port name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Device port name")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        /// <summary>
        /// Connected clock outputs
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("connected_clock_outputs")]
        [System.ComponentModel.DescriptionAttribute("Connected clock outputs")]
        public System.Collections.Generic.List<ConnectedClockOutput> ConnectedClockOutputs
        {
            get
            {
                return _connectedClockOutputs;
            }
            set
            {
                _connectedClockOutputs = value;
            }
        }
    
        public System.IObservable<HarpWhiteRabbit> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HarpWhiteRabbit(this)));
        }
    
        public System.IObservable<HarpWhiteRabbit> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HarpWhiteRabbit(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("WhoAmI = " + _whoAmI + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("PortName = " + _portName + ", ");
            stringBuilder.Append("ConnectedClockOutputs = " + _connectedClockOutputs);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class OnixCommutator
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private CommutatorSettings _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _portName;
    
        public OnixCommutator()
        {
            _deviceType = "OnixCommutator";
            _additionalSettings = new CommutatorSettings();
        }
    
        protected OnixCommutator(OnixCommutator other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _portName = other._portName;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings for the commutator.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings for the commutator.")]
        public CommutatorSettings AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Commutator COM port name.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("port_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Commutator COM port name.")]
        public string PortName
        {
            get
            {
                return _portName;
            }
            set
            {
                _portName = value;
            }
        }
    
        public System.IObservable<OnixCommutator> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OnixCommutator(this)));
        }
    
        public System.IObservable<OnixCommutator> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OnixCommutator(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("PortName = " + _portName);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Rect
    {
    
        private int _x;
    
        private int _y;
    
        private int _width;
    
        private int _height;
    
        public Rect()
        {
            _x = 0;
            _y = 0;
            _width = 0;
            _height = 0;
        }
    
        protected Rect(Rect other)
        {
            _x = other._x;
            _y = other._y;
            _width = other._width;
            _height = other._height;
        }
    
        /// <summary>
        /// X coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the top-left corner")]
        public int X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the top-left corner
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the top-left corner")]
        public int Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Width of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("width")]
        [System.ComponentModel.DescriptionAttribute("Width of the rectangle")]
        public int Width
        {
            get
            {
                return _width;
            }
            set
            {
                _width = value;
            }
        }
    
        /// <summary>
        /// Height of the rectangle
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("height")]
        [System.ComponentModel.DescriptionAttribute("Height of the rectangle")]
        public int Height
        {
            get
            {
                return _height;
            }
            set
            {
                _height = value;
            }
        }
    
        public System.IObservable<Rect> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Rect(this)));
        }
    
        public System.IObservable<Rect> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Rect(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y = " + _y + ", ");
            stringBuilder.Append("Width = " + _width + ", ");
            stringBuilder.Append("Height = " + _height);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class RobocopyController
    {
    
        private string _remotePath;
    
        public RobocopyController()
        {
        }
    
        protected RobocopyController(RobocopyController other)
        {
            _remotePath = other._remotePath;
        }
    
        /// <summary>
        /// Remote path to copy files to.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("remote_path", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Remote path to copy files to.")]
        public string RemotePath
        {
            get
            {
                return _remotePath;
            }
            set
            {
                _remotePath = value;
            }
        }
    
        public System.IObservable<RobocopyController> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RobocopyController(this)));
        }
    
        public System.IObservable<RobocopyController> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RobocopyController(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("RemotePath = " + _remotePath);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class SpinnakerCamera
    {
    
        private string _deviceType;
    
        private string _deviceName;
    
        private BaseModel _additionalSettings;
    
        private BaseModel _calibration;
    
        private string _serialNumber;
    
        private int _binning;
    
        private SpinnakerCameraColorProcessing _colorProcessing;
    
        private int _exposure;
    
        private double _gain;
    
        private double? _gamma;
    
        private SpinnakerCameraAdcBitDepth? _adcBitDepth;
    
        private SpinnakerCameraPixelFormat? _pixelFormat;
    
        private Rect _regionOfInterest;
    
        private VideoWriter _videoWriter;
    
        public SpinnakerCamera()
        {
            _deviceType = "SpinnakerCamera";
            _binning = 1;
            _colorProcessing = AindBehaviorPirouetteDataSchema.Rig.SpinnakerCameraColorProcessing.Default;
            _exposure = 1000;
            _gain = 0D;
            _adcBitDepth = AindBehaviorPirouetteDataSchema.Rig.SpinnakerCameraAdcBitDepth.Adc8bit;
            _pixelFormat = AindBehaviorPirouetteDataSchema.Rig.SpinnakerCameraPixelFormat.Mono8;
            _regionOfInterest = new Rect();
        }
    
        protected SpinnakerCamera(SpinnakerCamera other)
        {
            _deviceType = other._deviceType;
            _deviceName = other._deviceName;
            _additionalSettings = other._additionalSettings;
            _calibration = other._calibration;
            _serialNumber = other._serialNumber;
            _binning = other._binning;
            _colorProcessing = other._colorProcessing;
            _exposure = other._exposure;
            _gain = other._gain;
            _gamma = other._gamma;
            _adcBitDepth = other._adcBitDepth;
            _pixelFormat = other._pixelFormat;
            _regionOfInterest = other._regionOfInterest;
            _videoWriter = other._videoWriter;
        }
    
        /// <summary>
        /// Device type
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_type")]
        [System.ComponentModel.DescriptionAttribute("Device type")]
        public string DeviceType
        {
            get
            {
                return _deviceType;
            }
            set
            {
                _deviceType = value;
            }
        }
    
        /// <summary>
        /// Device name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("device_name")]
        [System.ComponentModel.DescriptionAttribute("Device name")]
        public string DeviceName
        {
            get
            {
                return _deviceName;
            }
            set
            {
                _deviceName = value;
            }
        }
    
        /// <summary>
        /// Additional settings
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("additional_settings")]
        [System.ComponentModel.DescriptionAttribute("Additional settings")]
        public BaseModel AdditionalSettings
        {
            get
            {
                return _additionalSettings;
            }
            set
            {
                _additionalSettings = value;
            }
        }
    
        /// <summary>
        /// Calibration
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("calibration")]
        [System.ComponentModel.DescriptionAttribute("Calibration")]
        public BaseModel Calibration
        {
            get
            {
                return _calibration;
            }
            set
            {
                _calibration = value;
            }
        }
    
        /// <summary>
        /// Camera serial number
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("serial_number", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Camera serial number")]
        public string SerialNumber
        {
            get
            {
                return _serialNumber;
            }
            set
            {
                _serialNumber = value;
            }
        }
    
        /// <summary>
        /// Binning
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("binning")]
        [System.ComponentModel.DescriptionAttribute("Binning")]
        public int Binning
        {
            get
            {
                return _binning;
            }
            set
            {
                _binning = value;
            }
        }
    
        /// <summary>
        /// Color processing
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("color_processing")]
        [System.ComponentModel.DescriptionAttribute("Color processing")]
        public SpinnakerCameraColorProcessing ColorProcessing
        {
            get
            {
                return _colorProcessing;
            }
            set
            {
                _colorProcessing = value;
            }
        }
    
        /// <summary>
        /// Exposure time
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("exposure")]
        [System.ComponentModel.DescriptionAttribute("Exposure time")]
        public int Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// Gain
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("gain")]
        [System.ComponentModel.DescriptionAttribute("Gain")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        /// <summary>
        /// Gamma. If None, will disable gamma correction.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("gamma")]
        [System.ComponentModel.DescriptionAttribute("Gamma. If None, will disable gamma correction.")]
        public double? Gamma
        {
            get
            {
                return _gamma;
            }
            set
            {
                _gamma = value;
            }
        }
    
        /// <summary>
        /// ADC bit depth. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("adc_bit_depth")]
        [System.ComponentModel.DescriptionAttribute("ADC bit depth. If None will be left as default.")]
        public SpinnakerCameraAdcBitDepth? AdcBitDepth
        {
            get
            {
                return _adcBitDepth;
            }
            set
            {
                _adcBitDepth = value;
            }
        }
    
        /// <summary>
        /// Pixel format. If None will be left as default.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("pixel_format")]
        [System.ComponentModel.DescriptionAttribute("Pixel format. If None will be left as default.")]
        public SpinnakerCameraPixelFormat? PixelFormat
        {
            get
            {
                return _pixelFormat;
            }
            set
            {
                _pixelFormat = value;
            }
        }
    
        /// <summary>
        /// Region of interest
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("region_of_interest")]
        [System.ComponentModel.DescriptionAttribute("Region of interest")]
        public Rect RegionOfInterest
        {
            get
            {
                return _regionOfInterest;
            }
            set
            {
                _regionOfInterest = value;
            }
        }
    
        /// <summary>
        /// Video writer. If not provided, no video will be saved.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("video_writer")]
        [System.ComponentModel.DescriptionAttribute("Video writer. If not provided, no video will be saved.")]
        public VideoWriter VideoWriter
        {
            get
            {
                return _videoWriter;
            }
            set
            {
                _videoWriter = value;
            }
        }
    
        public System.IObservable<SpinnakerCamera> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SpinnakerCamera(this)));
        }
    
        public System.IObservable<SpinnakerCamera> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SpinnakerCamera(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("DeviceType = " + _deviceType + ", ");
            stringBuilder.Append("DeviceName = " + _deviceName + ", ");
            stringBuilder.Append("AdditionalSettings = " + _additionalSettings + ", ");
            stringBuilder.Append("Calibration = " + _calibration + ", ");
            stringBuilder.Append("SerialNumber = " + _serialNumber + ", ");
            stringBuilder.Append("Binning = " + _binning + ", ");
            stringBuilder.Append("ColorProcessing = " + _colorProcessing + ", ");
            stringBuilder.Append("Exposure = " + _exposure + ", ");
            stringBuilder.Append("Gain = " + _gain + ", ");
            stringBuilder.Append("Gamma = " + _gamma + ", ");
            stringBuilder.Append("AdcBitDepth = " + _adcBitDepth + ", ");
            stringBuilder.Append("PixelFormat = " + _pixelFormat + ", ");
            stringBuilder.Append("RegionOfInterest = " + _regionOfInterest + ", ");
            stringBuilder.Append("VideoWriter = " + _videoWriter);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraAdcBitDepth
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Adc8bit = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Adc10bit = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Adc12bit = 2,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum SpinnakerCameraPixelFormat
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
        Mono8 = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
        Mono16 = 1,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
        Rgb8packed = 2,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
        Bayergr8 = 3,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
        Bayerrg8 = 4,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
        Bayergb8 = 5,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
        Bayerbg8 = 6,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
        Bayergr16 = 7,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
        Bayerrg16 = 8,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
        Bayergb16 = 9,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
        Bayerbg16 = 10,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
        Mono12packed = 11,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
        Bayergr12packed = 12,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
        Bayerrg12packed = 13,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
        Bayergb12packed = 14,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
        Bayerbg12packed = 15,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
        Yuv411packed = 16,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
        Yuv422packed = 17,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
        Yuv444packed = 18,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
        Mono12p = 19,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
        Bayergr12p = 20,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
        Bayerrg12p = 21,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
        Bayergb12p = 22,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
        Bayerbg12p = 23,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
        Ycbcr8 = 24,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
        Ycbcr4228 = 25,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
        Ycbcr4118 = 26,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
        Bgr8 = 27,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
        Bgra8 = 28,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
        Mono10packed = 29,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
        Bayergr10packed = 30,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
        Bayerrg10packed = 31,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
        Bayergb10packed = 32,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
        Bayerbg10packed = 33,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="34")]
        Mono10p = 34,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="35")]
        Bayergr10p = 35,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="36")]
        Bayerrg10p = 36,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
        Bayergb10p = 37,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
        Bayerbg10p = 38,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
        Mono1p = 39,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
        Mono2p = 40,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
        Mono4p = 41,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
        Mono8s = 42,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
        Mono10 = 43,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
        Mono12 = 44,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
        Mono14 = 45,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
        Mono16s = 46,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
        Mono32f = 47,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
        Bayerbg10 = 48,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
        Bayerbg12 = 49,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
        Bayergb10 = 50,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
        Bayergb12 = 51,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
        Bayergr10 = 52,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
        Bayergr12 = 53,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
        Bayerrg10 = 54,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
        Bayerrg12 = 55,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
        Rgba8 = 56,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
        Rgba10 = 57,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
        Rgba10p = 58,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
        Rgba12 = 59,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
        Rgba12p = 60,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
        Rgba14 = 61,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
        Rgba16 = 62,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
        Rgb8 = 63,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
        Rgb8Planar = 64,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
        Rgb10 = 65,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
        Rgb10Planar = 66,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
        Rgb10p = 67,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
        Rgb10p32 = 68,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
        Rgb12 = 69,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
        Rgb12Planar = 70,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
        Rgb12p = 71,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
        Rgb14 = 72,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
        Rgb16 = 73,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
        Rgb16s = 74,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
        Rgb32f = 75,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
        Rgb16Planar = 76,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
        Rgb565p = 77,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
        Bgra10 = 78,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
        Bgra10p = 79,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
        Bgra12 = 80,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
        Bgra12p = 81,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
        Bgra14 = 82,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
        Bgra16 = 83,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
        Rgba32f = 84,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
        Bgr10 = 85,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
        Bgr10p = 86,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
        Bgr12 = 87,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
        Bgr12p = 88,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
        Bgr14 = 89,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
        Bgr16 = 90,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
        Bgr565p = 91,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="92")]
        R8 = 92,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="93")]
        R10 = 93,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="94")]
        R12 = 94,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="95")]
        R16 = 95,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="96")]
        G8 = 96,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="97")]
        G10 = 97,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="98")]
        G12 = 98,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="99")]
        G16 = 99,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
        B8 = 100,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
        B10 = 101,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
        B12 = 102,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
        B16 = 103,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
        Coord3dAbc8 = 104,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
        Coord3dAbc8Planar = 105,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="106")]
        Coord3dAbc10p = 106,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="107")]
        Coord3dAbc10pPlanar = 107,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="108")]
        Coord3dAbc12p = 108,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="109")]
        Coord3dAbc12pPlanar = 109,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="110")]
        Coord3dAbc16 = 110,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="111")]
        Coord3dAbc16Planar = 111,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="112")]
        Coord3dAbc32f = 112,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="113")]
        Coord3dAbc32fPlanar = 113,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="114")]
        Coord3dAc8 = 114,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="115")]
        Coord3dAc8Planar = 115,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="116")]
        Coord3dAc10p = 116,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="117")]
        Coord3dAc10pPlanar = 117,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="118")]
        Coord3dAc12p = 118,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="119")]
        Coord3dAc12pPlanar = 119,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="120")]
        Coord3dAc16 = 120,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="121")]
        Coord3dAc16Planar = 121,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="122")]
        Coord3dAc32f = 122,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="123")]
        Coord3dAc32fPlanar = 123,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="124")]
        Coord3dA8 = 124,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="125")]
        Coord3dA10p = 125,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="126")]
        Coord3dA12p = 126,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="127")]
        Coord3dA16 = 127,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
        Coord3dA32f = 128,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="129")]
        Coord3dB8 = 129,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="130")]
        Coord3dB10p = 130,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="131")]
        Coord3dB12p = 131,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="132")]
        Coord3dB16 = 132,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="133")]
        Coord3dB32f = 133,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="134")]
        Coord3dC8 = 134,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="135")]
        Coord3dC10p = 135,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="136")]
        Coord3dC12p = 136,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="137")]
        Coord3dC16 = 137,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="138")]
        Coord3dC32f = 138,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="139")]
        Confidence1 = 139,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="140")]
        Confidence1p = 140,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="141")]
        Confidence8 = 141,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="142")]
        Confidence16 = 142,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="143")]
        Confidence32f = 143,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Vector3
    {
    
        private double _x;
    
        private double _y;
    
        private double _z;
    
        public Vector3()
        {
            _x = 0D;
            _y = 0D;
            _z = 0D;
        }
    
        protected Vector3(Vector3 other)
        {
            _x = other._x;
            _y = other._y;
            _z = other._z;
        }
    
        /// <summary>
        /// X coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("x")]
        [System.ComponentModel.DescriptionAttribute("X coordinate of the point")]
        public double X
        {
            get
            {
                return _x;
            }
            set
            {
                _x = value;
            }
        }
    
        /// <summary>
        /// Y coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("y")]
        [System.ComponentModel.DescriptionAttribute("Y coordinate of the point")]
        public double Y
        {
            get
            {
                return _y;
            }
            set
            {
                _y = value;
            }
        }
    
        /// <summary>
        /// Z coordinate of the point
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("z")]
        [System.ComponentModel.DescriptionAttribute("Z coordinate of the point")]
        public double Z
        {
            get
            {
                return _z;
            }
            set
            {
                _z = value;
            }
        }
    
        public System.IObservable<Vector3> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Vector3(this)));
        }
    
        public System.IObservable<Vector3> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Vector3(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("X = " + _x + ", ");
            stringBuilder.Append("Y = " + _y + ", ");
            stringBuilder.Append("Z = " + _z);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "video_writer_type")]
    [JsonInheritanceAttribute("FFMPEG", typeof(VideoWriterFfmpeg))]
    [JsonInheritanceAttribute("OPENCV", typeof(VideoWriterOpenCv))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriter
    {
    
        public VideoWriter()
        {
        }
    
        protected VideoWriter(VideoWriter other)
        {
        }
    
        public System.IObservable<VideoWriter> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriter(this)));
        }
    
        public System.IObservable<VideoWriter> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriter(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriterFfmpeg : VideoWriter
    {
    
        private int _frameRate;
    
        private string _containerExtension;
    
        private string _outputArguments;
    
        private string _inputArguments;
    
        public VideoWriterFfmpeg()
        {
            _frameRate = 30;
            _containerExtension = "mp4";
            _outputArguments = "-vf \"scale=out_color_matrix=bt709:out_range=full,format=bgr24,scale=out_range=full\" -c:v h264_nvenc -pix_fmt yuv420p -color_range full -colorspace bt709 -color_trc linear -tune hq -preset p4 -rc vbr -cq 12 -b:v 0M -metadata author=\"Allen Institute for Neural Dynamics\" -maxrate 700M -bufsize 350M";
            _inputArguments = "-colorspace bt709 -color_primaries bt709 -color_range full -color_trc linear";
        }
    
        protected VideoWriterFfmpeg(VideoWriterFfmpeg other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _outputArguments = other._outputArguments;
            _inputArguments = other._inputArguments;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Output arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("output_arguments")]
        [System.ComponentModel.DescriptionAttribute("Output arguments")]
        public string OutputArguments
        {
            get
            {
                return _outputArguments;
            }
            set
            {
                _outputArguments = value;
            }
        }
    
        /// <summary>
        /// Input arguments
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("input_arguments")]
        [System.ComponentModel.DescriptionAttribute("Input arguments")]
        public string InputArguments
        {
            get
            {
                return _inputArguments;
            }
            set
            {
                _inputArguments = value;
            }
        }
    
        public System.IObservable<VideoWriterFfmpeg> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterFfmpeg(this)));
        }
    
        public System.IObservable<VideoWriterFfmpeg> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterFfmpeg(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("FrameRate = " + _frameRate + ", ");
            stringBuilder.Append("ContainerExtension = " + _containerExtension + ", ");
            stringBuilder.Append("OutputArguments = " + _outputArguments + ", ");
            stringBuilder.Append("InputArguments = " + _inputArguments);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class VideoWriterOpenCv : VideoWriter
    {
    
        private int _frameRate;
    
        private string _containerExtension;
    
        private string _fourCc;
    
        public VideoWriterOpenCv()
        {
            _frameRate = 30;
            _containerExtension = "avi";
            _fourCc = "FMP4";
        }
    
        protected VideoWriterOpenCv(VideoWriterOpenCv other) : 
                base(other)
        {
            _frameRate = other._frameRate;
            _containerExtension = other._containerExtension;
            _fourCc = other._fourCc;
        }
    
        /// <summary>
        /// Encoding frame rate
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("frame_rate")]
        [System.ComponentModel.DescriptionAttribute("Encoding frame rate")]
        public int FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// Container extension
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("container_extension")]
        [System.ComponentModel.DescriptionAttribute("Container extension")]
        public string ContainerExtension
        {
            get
            {
                return _containerExtension;
            }
            set
            {
                _containerExtension = value;
            }
        }
    
        /// <summary>
        /// Four character code
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("four_cc")]
        [System.ComponentModel.DescriptionAttribute("Four character code")]
        public string FourCc
        {
            get
            {
                return _fourCc;
            }
            set
            {
                _fourCc = value;
            }
        }
    
        public System.IObservable<VideoWriterOpenCv> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new VideoWriterOpenCv(this)));
        }
    
        public System.IObservable<VideoWriterOpenCv> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new VideoWriterOpenCv(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("FrameRate = " + _frameRate + ", ");
            stringBuilder.Append("ContainerExtension = " + _containerExtension + ", ");
            stringBuilder.Append("FourCc = " + _fourCc);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class ZmqConnection
    {
    
        private string _connectionString;
    
        private string _topic;
    
        public ZmqConnection()
        {
            _connectionString = "@tcp://localhost:5556";
            _topic = "";
        }
    
        protected ZmqConnection(ZmqConnection other)
        {
            _connectionString = other._connectionString;
            _topic = other._topic;
        }
    
        /// <summary>
        /// The connection string for the ZMQ socket.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("connection_string")]
        [System.ComponentModel.DescriptionAttribute("The connection string for the ZMQ socket.")]
        public string ConnectionString
        {
            get
            {
                return _connectionString;
            }
            set
            {
                _connectionString = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("topic")]
        public string Topic
        {
            get
            {
                return _topic;
            }
            set
            {
                _topic = value;
            }
        }
    
        public System.IObservable<ZmqConnection> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ZmqConnection(this)));
        }
    
        public System.IObservable<ZmqConnection> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ZmqConnection(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ConnectionString = " + _connectionString + ", ");
            stringBuilder.Append("Topic = " + _topic);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class AindBehaviorPirouetteRig
    {
    
        private string _aindBehaviorServicesPkgVersion;
    
        private string _version;
    
        private string _computerName;
    
        private string _rigName;
    
        private CameraControllerSpinnakerCamera _cameraController;
    
        private HarpWhiteRabbit _harpWhiteRabbit;
    
        private HarpOutputExpander _harpOutputExpander;
    
        private OnixCommutator _onixCommutator;
    
        private RobocopyController _robocopyController;
    
        private ZmqConnection _zmqConnection;
    
        public AindBehaviorPirouetteRig()
        {
            _aindBehaviorServicesPkgVersion = "0.12.2";
            _version = "0.2.0";
            _cameraController = new CameraControllerSpinnakerCamera();
            _harpWhiteRabbit = new HarpWhiteRabbit();
            _harpOutputExpander = new HarpOutputExpander();
            _onixCommutator = new OnixCommutator();
            _robocopyController = new RobocopyController();
            _zmqConnection = new ZmqConnection();
        }
    
        protected AindBehaviorPirouetteRig(AindBehaviorPirouetteRig other)
        {
            _aindBehaviorServicesPkgVersion = other._aindBehaviorServicesPkgVersion;
            _version = other._version;
            _computerName = other._computerName;
            _rigName = other._rigName;
            _cameraController = other._cameraController;
            _harpWhiteRabbit = other._harpWhiteRabbit;
            _harpOutputExpander = other._harpOutputExpander;
            _onixCommutator = other._onixCommutator;
            _robocopyController = other._robocopyController;
            _zmqConnection = other._zmqConnection;
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("aind_behavior_services_pkg_version")]
        public string AindBehaviorServicesPkgVersion
        {
            get
            {
                return _aindBehaviorServicesPkgVersion;
            }
            set
            {
                _aindBehaviorServicesPkgVersion = value;
            }
        }
    
        [Newtonsoft.Json.JsonPropertyAttribute("version")]
        public string Version
        {
            get
            {
                return _version;
            }
            set
            {
                _version = value;
            }
        }
    
        /// <summary>
        /// Computer name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("computer_name")]
        [System.ComponentModel.DescriptionAttribute("Computer name")]
        public string ComputerName
        {
            get
            {
                return _computerName;
            }
            set
            {
                _computerName = value;
            }
        }
    
        /// <summary>
        /// Rig name
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("rig_name", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Rig name")]
        public string RigName
        {
            get
            {
                return _rigName;
            }
            set
            {
                _rigName = value;
            }
        }
    
        /// <summary>
        /// Required camera controller to triggered cameras.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("camera_controller", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Required camera controller to triggered cameras.")]
        public CameraControllerSpinnakerCamera CameraController
        {
            get
            {
                return _cameraController;
            }
            set
            {
                _cameraController = value;
            }
        }
    
        /// <summary>
        /// Harp white rabbit
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_white_rabbit", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp white rabbit")]
        public HarpWhiteRabbit HarpWhiteRabbit
        {
            get
            {
                return _harpWhiteRabbit;
            }
            set
            {
                _harpWhiteRabbit = value;
            }
        }
    
        /// <summary>
        /// Harp output expander
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("harp_output_expander", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Harp output expander")]
        public HarpOutputExpander HarpOutputExpander
        {
            get
            {
                return _harpOutputExpander;
            }
            set
            {
                _harpOutputExpander = value;
            }
        }
    
        /// <summary>
        /// Onix commutator
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("onix_commutator", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Onix commutator")]
        public OnixCommutator OnixCommutator
        {
            get
            {
                return _onixCommutator;
            }
            set
            {
                _onixCommutator = value;
            }
        }
    
        /// <summary>
        /// Robocopy controller
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("robocopy_controller", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("Robocopy controller")]
        public RobocopyController RobocopyController
        {
            get
            {
                return _robocopyController;
            }
            set
            {
                _robocopyController = value;
            }
        }
    
        /// <summary>
        /// ZMQ socket to connect to LifeAlert monitoring service.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("zmq_connection", Required=Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DescriptionAttribute("ZMQ socket to connect to LifeAlert monitoring service.")]
        public ZmqConnection ZmqConnection
        {
            get
            {
                return _zmqConnection;
            }
            set
            {
                _zmqConnection = value;
            }
        }
    
        public System.IObservable<AindBehaviorPirouetteRig> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new AindBehaviorPirouetteRig(this)));
        }
    
        public System.IObservable<AindBehaviorPirouetteRig> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new AindBehaviorPirouetteRig(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("AindBehaviorServicesPkgVersion = " + _aindBehaviorServicesPkgVersion + ", ");
            stringBuilder.Append("Version = " + _version + ", ");
            stringBuilder.Append("ComputerName = " + _computerName + ", ");
            stringBuilder.Append("RigName = " + _rigName + ", ");
            stringBuilder.Append("CameraController = " + _cameraController + ", ");
            stringBuilder.Append("HarpWhiteRabbit = " + _harpWhiteRabbit + ", ");
            stringBuilder.Append("HarpOutputExpander = " + _harpOutputExpander + ", ");
            stringBuilder.Append("OnixCommutator = " + _onixCommutator + ", ");
            stringBuilder.Append("RobocopyController = " + _robocopyController + ", ");
            stringBuilder.Append("ZmqConnection = " + _zmqConnection);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum SpinnakerCameraColorProcessing
    {
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="Default")]
        Default = 0,
    
        [System.Runtime.Serialization.EnumMemberAttribute(Value="NoColorProcessing")]
        NoColorProcessing = 1,
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    public partial class MatchVideoWriter : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(VideoWriter);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchVideoWriter),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<VideoWriter> source)
            where TResult : VideoWriter
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<VideoWriter>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into JSON strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into JSON strings.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [Bonsai.CombinatorAttribute()]
    public partial class SerializeToJson
    {
    
        public Newtonsoft.Json.Formatting Formatting { get; set; }

        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            var formatting = Formatting;
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.SerializeObject(value, formatting));
        }

        public System.IObservable<string> Process(System.IObservable<BaseModel> source)
        {
            return Process<BaseModel>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraControllerSpinnakerCamera> source)
        {
            return Process<CameraControllerSpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CommutatorSettings> source)
        {
            return Process<CommutatorSettings>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ConnectedClockOutput> source)
        {
            return Process<ConnectedClockOutput>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpOutputExpander> source)
        {
            return Process<HarpOutputExpander>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HarpWhiteRabbit> source)
        {
            return Process<HarpWhiteRabbit>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OnixCommutator> source)
        {
            return Process<OnixCommutator>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Rect> source)
        {
            return Process<Rect>(source);
        }

        public System.IObservable<string> Process(System.IObservable<RobocopyController> source)
        {
            return Process<RobocopyController>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SpinnakerCamera> source)
        {
            return Process<SpinnakerCamera>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Vector3> source)
        {
            return Process<Vector3>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriter> source)
        {
            return Process<VideoWriter>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterFfmpeg> source)
        {
            return Process<VideoWriterFfmpeg>(source);
        }

        public System.IObservable<string> Process(System.IObservable<VideoWriterOpenCv> source)
        {
            return Process<VideoWriterOpenCv>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ZmqConnection> source)
        {
            return Process<ZmqConnection>(source);
        }

        public System.IObservable<string> Process(System.IObservable<AindBehaviorPirouetteRig> source)
        {
            return Process<AindBehaviorPirouetteRig>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of JSON strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.1.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of JSON strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<BaseModel>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraControllerSpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CommutatorSettings>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ConnectedClockOutput>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpOutputExpander>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HarpWhiteRabbit>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OnixCommutator>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Rect>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RobocopyController>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SpinnakerCamera>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Vector3>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriter>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterFfmpeg>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<VideoWriterOpenCv>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ZmqConnection>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<AindBehaviorPirouetteRig>))]
    public partial class DeserializeFromJson : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromJson()
        {
            Type = new Bonsai.Expressions.TypeMapping<AindBehaviorPirouetteRig>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromJson),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Select(source, value => Newtonsoft.Json.JsonConvert.DeserializeObject<T>(value));
        }
    }
}